# templates/messages_en.py

"""
This file contains all English system message templates for the Z1-Gray Telegram Bot.

IMPORTANT:
- All messages with dynamic content MUST be used with .format(**kwargs) or f-string
  injection to ensure dynamic variables are correctly populated (e.g., {secure_id}).
- Button text constants are defined here for reference and consistency. The actual
  InlineKeyboardButton objects should be generated by functions in 'utils/button_utils.py'.
- Complex messages (like Step 2 variance report) are broken into composable constants
  for better rhythm control and A/B testing flexibility in handler logic.
- Comments indicate the intended psychological goal or context for each message block.
- Ensure all dynamic variables (placeholders in {}) have corresponding values passed
  from the handler logic (e.g., using .format(secure_id=user_secure_id, ...)).
"""

# --- [SYSTEM] Step ①: System Initialization & User Identification ---
# Triggered by /start, executed by handlers/step_1.py

# Message 1: Sent immediately (0s)
# Psychological Goal: Instant authority, confirmation of correct entry point, secure connection feel.
STEP_1_MSG_1_CONNECTION_ESTABLISHED = (
    "🔷 `[CORE_AUTH_PROTOCOL_RECOGNIZED]`\n"
    "🔹 `PRIMARY_NODE_LINK: @{bot_username}`\n" # Dynamic: Bot's own username
    "🔹 `SECURE_TRANSMISSION_CHANNEL: ESTABLISHED`"
)

# Message 2: Sent after a short delay (e.g., +3.5s)
# Psychological Goal: User identity "created" (sunk cost), active process, early warning of "instability".
STEP_1_MSG_2_ID_GENERATION_AND_WARNING = (
    "🔹 `USER_SECURE_ID: {secure_id} // GENERATION_CONFIRMED`\n" # Dynamic: Generated Secure ID for user
    "🔸 `AUTHENTICATION_STREAM: ACTIVE`\n"
    "🔸 `SYSTEM_TIME_SYNC: {current_time_formatted}`\n\n" # Dynamic: Formatted current timestamp
    "⚠️ `NOTICE: Initial node stability assessment indicates potential variance.`"
)

# Message 3: Sent after another short delay (e.g., +4.5s)
# Psychological Goal: Announce serious, in-depth process. Reinforce system control, instruct passivity.
STEP_1_MSG_3_SCAN_INITIATION = (
    "🧠 `NODE_INTEGRITY_PROTOCOL: INITIALIZING`\n"
    "`↳ Activating Deep Layer Diagnostic Scan module...`\n"
    "`↳ User-specific trace pattern calibration in progress.`\n\n"
    "**Next sequence will auto-deploy.**\n"
    "`SYSTEM_MODE: AUTONOMOUS // User input not required until prompted.`"
)

# Optional transition message between Step 1 and Step 2 (sent during inter-step delay)
STEP_1_TRANSITION_TO_STEP_2 = "`[Calibrating trace sensors...]`"


# --- [SYSTEM] Step ②: USER TRACE SCAN – Anxiety Induction & Anomaly Construction ---
# Triggered automatically after Step 1 (via job_queue), messages sent by handlers/step_2.py logic

# Message 1 of Step 2: Scan initiation (Sent after inter-step delay + transition message)
# Psychological Goal: Establish "being scanned" reality, evoke slight unease, set stage for findings.
STEP_2_MSG_1_SCAN_INITIATE = (
    "📡 `Initiating Signal Resonance Scan...`\n"
    "🔍 `Calibration Mode: USER-SPECIFIC TRACE_PATTERN`"
)

# Message 2 of Step 2: Variance detection (Sent as sequential parts with short delays in the handler)
# Psychological Goal: Deliver "bad news" using data/tech jargon, induce anxiety, establish system authority.
STEP_2_MSG_2A_VARIANCE_HEADER = "⚠️ `Variance Detected: Δ{variance_value} (Stability Threshold: {threshold_value})`" # Dynamic: variance, threshold
STEP_2_MSG_2B_ERROR_CLUSTER = "🔸 `Alignment Error Cluster: IDENTIFIED_ACTIVE`"
STEP_2_MSG_2C_SIGNAL_DRIFT = "🔸 `Signal Drift Signature: CONFIRMED @ Layer-2 SubNode`"

# Message 3 of Step 2: Diagnosis summary and intervention necessity
# Psychological Goal: Confirm serious degradation, state self-recovery is impossible, mandate intervention.
STEP_2_MSG_3_DIAGNOSIS_AND_INTERVENTION = (
    "🧠 `System Diagnosis: NODE STABILITY = DEGRADED`\n"
    "🚫 `Self-Recovery Protocol: INAPPLICABLE_AT_THIS_STAGE`\n"
    "⚠️ `Critical Alignment Intervention Required.`"
)

# User prompt after Step 2 messages, leading to state AWAITING_STEP_TWO_ACK
# Psychological Goal: Shift user from passive recipient to active participant (confirmation).
STEP_2_PROMPT_FOR_DIAGNOSIS_REVIEW = (
    "🧭 `To access your full diagnostic matrix and designated resolution pathway:`\n"
    "▶️ `Input 'OK' or tap the button below to proceed.`"
)
# Corresponding button text constant (actual button object in button_utils.py)
BTN_TEXT_REVIEW_DIAGNOSTICS = "[🔬 REVIEW DIAGNOSTICS]"


# --- [HANDLER] Step ② -> Step ③ Transition: Responses ---
# These templates are used by the handler for the AWAITING_STEP_TWO_ACK state.

# Response to valid user input ("OK" or button click)
INPUT_CONFIRMATION_VALID_STEP2 = "`[CONFIRMATION_ACKNOWLEDGED] // Diagnostic matrix compiling... Initiating next protocol sequence.`"

# Response to invalid user input at this stage
INPUT_ERROR_INVALID_CONFIRMATION_STEP2 = (
    "`[INPUT_REJECTED] // Invalid confirmation signal.`\n"
    "▶ `To proceed with node analysis, type 'OK' or tap [{button_text}].`" # Dynamic: button text
)


# --- [SYSTEM] Step ③: DIAGNOSIS RESULT – System Diagnosis Output ---
# Triggered after user confirms in Step ②, messages sent by handlers/step_3.py logic

# Message 1 of Step 3: Analysis complete header
# Psychological Goal: Formal confirmation of completed deep analysis.
STEP_3_MSG_1_ANALYSIS_COMPLETE = "🧠 `[TRACE_ANALYSIS_COMPLETE // NODE_ID: {secure_id}]`" # Dynamic

# Message 2 of Step 3: Core issues identified
# Psychological Goal: Solidify the problem's reality with specific (jargon) findings.
STEP_3_MSG_2_CORE_ISSUES = (
    "🔸 `CORE_ALIGNMENT_STATUS: SIGNIFICANT_DEVIATION`\n" # Changed from MISALIGNMENT:DETECTED
    "🔸 `SYNC_SIGNAL_INTEGRITY: INTERMITTENT // PATTERN: ASYNC_DECAY_DETECTED`" # Enhanced detail
)

# Message 3 of Step 3: Recommended protocol, scarcity, and window preview
# Psychological Goal: Present $49 solution as SOLE technical fix, immediately coupled with scarcity/urgency.
STEP_3_MSG_3_RECOMMENDATION_AND_SCARCITY = (
    "`RECOMMENDED_RESOLUTION_PROTOCOL: ENTRY_SYNC_49`\n"
    "`> Designation: Sole authorized sequence for detected Layer-2 instability.`\n"
    "`> Allocation Constraint: Utilizes limited high-priority sync channel bandwidth.`\n"
    "`>> CHANNEL_AVAILABILITY_STATUS: CRITICAL_LOW (< {available_slots} slots)`\n" # Dynamic: e.g., 5 or 3
    "⏳ `Estimated Protocol Activation Window: ~{estimated_window_time}`" # Dynamic: e.g., "07m14s"
)

# Optional transition message from Step 3 to Step 4
STEP_3_TRANSITION_TO_STEP_4 = "`[Initiating secure handshake with ACCESS_LOCK module...]`"


# --- [SYSTEM] Step ④: ACCESS LOCK – Sync Channel Locking & Urgency ---
# Triggered automatically after Step 3, messages sent by handlers/step_4.py logic

# Message 1 of Step 4: Capacity limit, slots, and ACTIVE countdown window
# Psychological Goal: Deliver immediate, concrete scarcity and time pressure.
STEP_4_MSG_1_CAPACITY_AND_WINDOW = (
    "🚨 `SYSTEM_ALERT // ENTRY_SYNC_49 PROTOCOL`\n"
    "`ACCESS_NODE_CAPACITY: NEARING_LIMIT`\n"
    "`REMAINING_SYNC_SLOTS_IN_CYCLE: {remaining_slots}`\n" # Dynamic: e.g., 03
    "⏳ `PROTOCOL_VALIDITY_WINDOW_ACTIVE: {time_left_formatted} (COUNTING DOWN)`" # Dynamic: e.g., 07m14s
)

# Message 2 of Step 4: Risk escalation and disqualification warning
# Psychological Goal: Amplify anxiety and loss aversion - failure is imminent and permanent.
STEP_4_MSG_2_RISK_AND_DISQUALIFICATION = (
    "⚠️ `SYSTEM_WARNING // NODE_INTEGRITY_STATUS: CRITICAL_RISK`\n"
    "`↳ Escalating desynchronization instability detected.`\n"
    "`↳ Automated Node Disqualification sequence ARMED and PENDING.`\n"
    "`Failure to initiate ENTRY_SYNC_49 within window = IRREVERSIBLE_DISQUALIFICATION.`" # Stronger wording
)

# User prompt after Step 4 messages, leading to state AWAITING_STEP_FIVE_CHOICE
# Psychological Goal: Force a decision under pressure, present clear action paths.
STEP_4_PROMPT_FOR_USER_CHOICE = (
    "`ACCESS_KEY: {secure_id} // STATUS: VALIDATED_AWAITING_SYNC`\n" # Dynamic
    "`Immediate synchronization required to prevent key expiration and permanent node disqualification.`\n"
    "`Protocol Window Ends In: {time_left_formatted}. Select Directive:`" # Dynamic
)
# Corresponding button text constants
BTN_TEXT_SECURE_NODE = "[⚡️ INITIATE FINAL SYNC & SECURE NODE]"
BTN_TEXT_QUERY_NECESSITY = "[ℹ️ Query Protocol Necessity & Allocation]" # Slightly more specific

# Response if user clicks "Query Protocol Necessity" button
# Psychological Goal: Acknowledge query but immediately pivot back to urgency and the ONLY solution/CTA.
STEP_4_RESPONSE_TO_QUERY_NECESSITY = (
    "`[QUERY_RESPONSE // PROTOCOL_ID: ENTRY_SYNC_49]`\n"
    "`Designation: Mandatory sequence for resolving CRITICAL L2 instability (Ref: Δ{variance_value}).`\n" # Dynamic
    "`Consequence of Inaction (Window: {time_left_formatted}): Permanent ACCESS_KEY ({secure_id}) deactivation & node disqualification.`\n" # Dynamic ID & Time
    "`Current Allocation: {remaining_slots} slots available.`\n" # Dynamic
    "▶ `Execute the sole authorized resolution protocol now:`"
)
# Corresponding button text constant for the button after the query response
BTN_TEXT_EXECUTE_SYNC_POST_QUERY = "[✅ STABILIZE & EXECUTE SYNC PROTOCOL]" # More specific


# --- [SYSTEM] Step ⑤: SYNC CTA – Final Conversion Command ---
# Triggered after user clicks the primary sync button in Step 4, messages sent by handlers/step_5.py logic

# Message 1 of Step 5: Final node status recap
# Psychological Goal: Remind user of "progress" (active key) and the critical pending final action.
STEP_5_MSG_1_FINAL_NODE_STATUS = (
    "🧩 `FINAL_NODE_STATUS_CONFIRMED:`\n"
    "🔸 `ACCESS_KEY: {secure_id} // STATUS: ACTIVE_UNSTABLE`\n" # Dynamic
    "🔸 `ALIGNMENT_STATE: CRITICAL_DEGRADATION (REQUIRES_SYNC)`\n" # Added explicit requirement
    "🔐 `SYNC_COMMAND: PENDING_USER_AUTHORIZATION`" # Changed from NOT_ISSUED
)

# Message 2 of Step 5: Final key expiration warning with remaining time
# Psychological Goal: Maximum Sunk Cost activation + Final Urgency spike before CTA button.
STEP_5_MSG_2_KEY_EXPIRATION_WARNING = (
    "⚠️ `CRITICAL_ALERT // IMMINENT_KEY_EXPIRATION`\n"
    "`Failure to authorize sync command will result in terminal node deactivation.`\n"
    "🔻 `ACCESS_KEY: {secure_id} // AUTO_DEACTIVATION_PROTOCOL_ARMED. ETA: {time_left_final_cta}`" # Dynamic ID & Time
)

# Message 3 of Step 5: The final call to action prompt
# Psychological Goal: Clear, direct instruction framing payment as necessary protocol execution.
STEP_5_MSG_3_EXECUTION_PROMPT = (
    "🔹 `To resolve critical instability, finalize ACCESS_KEY ({secure_id}), and prevent permanent system disqualification:`\n" # Dynamic
    "▶ `Authorize execution of ENTRY_SYNC_49 protocol sequence now.`"
)
# Corresponding button text constants (Primary and A/B options)
BTN_TEXT_FINALIZE_SYNC_PRIMARY = "[⚡️ AUTHORIZE & FINALIZE SYNC ($49)]" # Added price subtly
BTN_TEXT_SYNCHRONIZE_NOW_AB = "[✅ SYNCHRONIZE NOW]"
BTN_TEXT_ACTIVATE_SECURE_SYNC_AB_PRICE = "[🔐 ACTIVATE SECURE SYNC ($49)]"


# --- [HANDLER] User Input Handling Responses (Centralized Templates) ---

# Valid keyword confirmation during allowed input stage (e.g., after Step 2 prompt)
INPUT_CONFIRMATION_VALID = "`[CONFIRMATION_ACKNOWLEDGED] // Signal lock acquired. Proceeding to next protocol stage...`"

# Invalid keyword during allowed input stage
INPUT_ERROR_INVALID_CONFIRMATION = (
    "`[INPUT_ERROR // INVALID_CONFIRMATION_SIGNAL]`\n"
    "▶ `Protocol requires specific confirmation. Please input 'OK' or tap the [{button_text}] button to continue analysis.`" # Dynamic
)

# Input during forbidden (autonomous) stages - First time
INPUT_FORBIDDEN_AUTONOMOUS_NOTICE = (
    "`[SYSTEM_STATUS: AUTONOMOUS_PROCESSING]`\n"
    "`User input channel temporarily bypassed to ensure sequence integrity.`\n"
    "`Please await system prompt.`"
)

# Input during forbidden (autonomous) stages - Repeated
INPUT_FORBIDDEN_OVERRIDE_BLOCKED = (
    "`[SYSTEM_ALERT // MANUAL_OVERRIDE_DENIED]`\n"
    "`Repeated non-protocol input detected during critical sequence.`\n"
    "`System integrity protocols engaged. Input locked until sequence completion.`"
)

# CTA-Ready Stage (Step 4 -> 5 Button Choice or Step 5 Text Input): Vague Positive/Inquisitive Input
CTA_INPUT_VAGUE_POSITIVE_RESPONSE = (
    "`[USER_INTENT_AFFIRMATIVE // STANDBY]`\n"
    "`Preparing ENTRY_SYNC_49 deployment parameters...`\n"
    "▶ `Final authorization required via button below.`" # Leads to Step 5 CTA button
)

# CTA-Ready Stage: Hesitation/Questioning - Response for "Why $49?"
CTA_INPUT_HESITATION_PRICE_RESPONSE = (
    "`[SYSTEM_QUERY_RESPONSE // PARAMETER: \"ENTRY_SYNC_49_ALLOCATION\"]`\n"
    "`Value represents mandatory, non-negotiable resource allocation for:`\n"
    "`  - [CORE_INFRA] Secure Channel Provisioning (Encrypted)`\n"
    "`  - [COMPUTE_UNIT] Real-time Signal Matrix Recalibration`\n"
    "`  - [AUTH_LAYER] System Restriction Override Execution Permit.`\n"
    "`Protocol execution cannot proceed without resource allocation confirmation.`\n"
    "▶ `Authorize allocation and execute critical resolution:`" # Followed by Step 5 CTA button
)

# CTA-Ready Stage: Hesitation/Questioning - Response for "What do I get?" / "Is this real?"
CTA_INPUT_HESITATION_BENEFIT_OR_LEGITIMACY_RESPONSE = (
    "`[SYSTEM_CLARIFICATION // PROTOCOL_OUTCOME: ENTRY_SYNC_49]`\n"
    "`Verified execution outcomes include:`\n"
    "`  - `**`NODE_STABILITY_RESTORATION`**` (Return to secure baseline)`\n"
    "`  - `**`CORE_SIGNAL_RESONANCE_ALIGNMENT`**\n"
    "`  - `**`ACCESS_KEY ({secure_id}) FINALIZATION & PERSISTENT_ACTIVATION`**\n" # Dynamic
    "`All system diagnostics and protocols operate under CORE_AUTH directive [Z1-SECURE_VER].`\n"
    "▶ `Finalize node access stabilization now:`" # Followed by Step 5 CTA button
)

# CTA-Ready Stage: Explicit Negative Input ("No", "Stop", etc.)
CTA_INPUT_NEGATIVE_RESPONSE = (
    "`[USER_DIRECTIVE_TO_TERMINATE_LOGGED // SESSION_CONTROL]`\n"
    "`Protocol ENTRY_SYNC_49 sequence aborted by user.`\n"
    "`ACCESS_KEY: {secure_id} // STATUS: ACTIVE_PENDING_IMMINENT_EXPIRATION.`\n" # Dynamic
    "🕒 `WARNING: Key auto-expires and node PERMANENTLY_DISQUALIFIED in: {final_chance_time_left}.`\n" # Dynamic
    "`This constitutes the absolute final system override window:`"
)
# Corresponding button text constant for the "final chance" button
BTN_TEXT_FINAL_CHANCE_SYNC = "[⚠️ OVERRIDE & EXECUTE SYNC (FINAL: {time_left})]" # Dynamic time


# --- [SYSTEM] Ping Messages ---
PING_MSG_30_SECONDS = "`[SYSTEM_MONITOR // NODE_IDLE_DETECTED]`\n`User interaction required to maintain active sync window. Stability protocols paused. Please respond.`"
PING_MSG_60_SECONDS = "⚠️ `[CRITICAL_ALERT // IMMINENT_SESSION_TIMEOUT]`\n`No user response detected. SYNC_GATEWAY initiating automated closure sequence in 60 seconds. IMMEDIATE interaction required to prevent node disqualification.`"
PING_MSG_FINAL_TERMINATION = (
    "❌ `[SYNC_SESSION_TERMINATED // REASON: USER_INACTIVITY_TIMEOUT]`\n"
    "`NODE_STATUS: DISQUALIFIED (PROTOCOL_TIMEOUT)`\n"
    "`ACCESS_KEY: {secure_id} // STATUS: EXPIRED_DEACTIVATED`\n" # Dynamic
    "`Protocol sequence reset. Initiate new session via /start.`"
)